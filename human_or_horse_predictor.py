# -*- coding: utf-8 -*-
"""Human_or Horse_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tv3WgZmqrWxpvleTsuLtzPsQ_rZe5TT8

# To train a model using human and horse picture

Import Libraries
"""

import tensorflow as tf
import keras
from keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt

"""Load Data """

train_data_path="/content/drive/MyDrive/Deep Learning Projects/Human_and_Horse_prediction_Project/horse-or-human/horse-or-human/train"
validation_data_path="/content/drive/MyDrive/Deep Learning Projects/Human_and_Horse_prediction_Project/horse-or-human/horse-or-human/validation"

"""Data Preprocessing (To increase images data for better training)"""

training_datagen=ImageDataGenerator(rescale=1./255,
                                    rotation_range=40,
                                    width_shift_range=0.2,
                                    height_shift_range=0.2,
                                    shear_range=0.2,
                                    zoom_range=0.2,
                                    horizontal_flip=True,
                                    fill_mode='nearest')

"""To spacified all picture size for input to model"""

training_data=training_datagen.flow_from_directory(train_data_path,
                                     target_size=(150,150),
                                     batch_size=32,
                                     class_mode='binary')

Label_class=training_data.class_indices

Label_class

valid_data=ImageDataGenerator(rescale=1./255)

valid_data=training_datagen.flow_from_directory(validation_data_path,
                                     target_size=(150,150),
                                     batch_size=32,
                                     class_mode='binary')

"""Create a fucntion for ploting images"""

def plotimages(images_arr):
  fig, axes=plt.subplots(1,5, figsize=(20,20))
  axes=axes.flatten()
  for img, ax in zip(images_arr, axes):
    ax.imshow(img)
  plt.tight_layout()
  plt.show()

"""Input the data to above function and call"""

images=[training_data[0][0][0] for i in range(5)]
plotimages(images)

"""To build a CNN model"""

cnn_model=keras.models.Sequential([
                                   keras.layers.Conv2D(filters=32, kernel_size=32, input_shape=[150,150,3]),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   keras.layers.Conv2D(filters=64,kernel_size=3),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   keras.layers.Conv2D(filters=64,kernel_size=3),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   keras.layers.Conv2D(filters=64,kernel_size=3),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   
                                   keras.layers.Dropout(0.5),
                                   keras.layers.Flatten(),
                                   keras.layers.Dense(units=128, activation='relu'),
                                   keras.layers.Dropout(0.1),
                                   keras.layers.Dense(units=128, activation='relu'),
                                   keras.layers.Dropout(0.1),
                                   keras.layers.Dense(units=128, activation='relu'),
                                   keras.layers.Dropout(0.25),
                                   keras.layers.Dense(units=2, activation='softmax')
])

"""Compile the model"""

# complie the model
opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
cnn_model.compile(optimizer=opt, loss= 'sparse_categorical_crossentropy', metrics=['accuracy'])

"""to create a callabck--- check-point where model performance is maximum save it automatically """

model_path='/content/drive/MyDrive/Deep Learning Projects/Human_and_Horse_prediction_Project/horse-or-human/Models/human_or_horse_predictor.h5'
check_point= tf.keras.callbacks.ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
callback_list=[check_point]

"""To train the model"""

history = cnn_model.fit(training_data,
                        epochs=50,
                        verbose=1,
                        validation_data=valid_data,
                        callbacks=callback_list)

# Summerize history for accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
#plt.ylable('accuracy')
#plt.xlable('epoch')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# Summerize history for lose
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model lose')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""Build another model for better perfromance"""

cnn_model_2=keras.models.Sequential([
                                   keras.layers.Conv2D(filters=32, kernel_size=7, input_shape=[150,150,3]),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   
                                   keras.layers.Conv2D(filters=64,kernel_size=5),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   
                                   keras.layers.Conv2D(filters=64,kernel_size=3),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   
                                   keras.layers.Conv2D(filters=64,kernel_size=3),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   
                                   keras.layers.Conv2D(filters=64,kernel_size=3),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.MaxPool2D(pool_size=(2,2)),
                                   
                                   keras.layers.Dropout(0.5),
                                   keras.layers.Flatten(),
                                   keras.layers.Dense(units=128, activation='relu'),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.Dropout(0.5),
                                   keras.layers.Dense(units=128, activation='relu'),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.Dropout(0.5),
                                   keras.layers.Dense(units=128, activation='relu'),
                                   keras.layers.BatchNormalization(),
                                   keras.layers.Dropout(0.5),
                                   keras.layers.Dense(units=2, activation='softmax')
])

# complie the model
opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
cnn_model_2.compile(optimizer=opt, loss= 'sparse_categorical_crossentropy', metrics=['accuracy'])

model_path='/content/drive/MyDrive/Deep Learning Projects/Human_and_Horse_prediction_Project/horse-or-human/Models/human_or_horse_predictor_2.h5'
check_point= tf.keras.callbacks.ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
callback_list=[check_point]

history_2 = cnn_model_2.fit(training_data,
                        epochs=100,
                        verbose=1,
                        validation_data=valid_data,
                        callbacks=callback_list)

# Summerize history for accuracy
plt.plot(history_2.history['accuracy'])
plt.plot(history_2.history['val_accuracy'])
plt.title('model accuracy')
#plt.ylable('accuracy')
#plt.xlable('epoch')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# Summerize history for lose
plt.plot(history_2.history['loss'])
plt.plot(history_2.history['val_loss'])
plt.title('model lose')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()